{"version":3,"sources":["Travels.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["displayContainer","display","Travels","destination","country","image","distance","class","style","src","alt","className","headerStyle","background","color","textAlign","padding","Header","displaySection","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAeMA,G,UAAmB,CACxBC,QAAS,SAGKC,EAjBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,SAAhC,OACf,yBAAKC,MAAM,YAAYC,MAAOR,GAC7B,yBAAKO,MAAM,OACV,yBAAKA,MAAM,WACV,yBAAKE,IAAKJ,EAAOK,IAAI,GAAGH,MAAM,iCAC9B,wBAAII,UAAU,cAAcR,GAC5B,wBAAIQ,UAAU,aAAaP,GAC3B,wBAAIO,UAAU,aAAaL,OCG/B,IAAMM,EAAc,CACnBC,WAAY,OACZC,MAAO,QACPC,UAAW,SACXC,QAAS,QAGKC,EAjBf,WACC,OACC,4BAAQT,MAAOI,GACd,wBAAID,UAAU,qBACb,0BAAMA,UAAU,aAAhB,QADD,aCgCH,IAAMO,EAAiB,CACtBjB,QAAS,QAEKkB,EAjCf,WACC,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,EAAD,MACA,yBAAKZ,MAAOU,GACX,kBAAC,EAAD,CACCf,YAAY,YACZC,QAAQ,QACRC,MAAM,kHACNC,SAAS,WAGV,kBAAC,EAAD,CACCH,YAAY,YACZC,QAAQ,QACRC,MAAM,+FACNC,SAAS,WAGV,kBAAC,EAAD,CACCH,YAAY,SACZC,QAAQ,iBACRC,MAAM,oGACNC,SAAS,cClBMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.35b0ac1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Travels = ({ destination, country, image, distance }) => (\n\t<div class=\"container\" style={displayContainer}>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col s12\">\n\t\t\t\t<img src={image} alt=\"\" class=\"materialboxed responsive-img\" />\n\t\t\t\t<h4 className=\"black-text\">{destination}</h4>\n\t\t\t\t<h5 className=\"pink-text\">{country}</h5>\n\t\t\t\t<h5 className=\"pink-text\">{distance}</h5>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nconst displayContainer = {\n\tdisplay: 'flex'\n};\n\nexport default Travels;\n","import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1 className=\"center white-text\">\n\t\t\t\t<span className=\"pink-text\"> My </span>Travels\n\t\t\t</h1>\n\t\t</header>\n\t);\n}\n\nconst headerStyle = {\n\tbackground: '#333',\n\tcolor: 'white',\n\ttextAlign: 'center',\n\tpadding: '10px'\n};\n\nexport default Header;\n","import React from 'react';\n\nimport './App.css';\n\nimport Travels from './Travels';\nimport Header from './Header';\n\nfunction App() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Header />\n\t\t\t<div style={displaySection}>\n\t\t\t\t<Travels\n\t\t\t\t\tdestination=\"New Delhi\"\n\t\t\t\t\tcountry=\"India\"\n\t\t\t\t\timage=\"https://cdn.glitch.com/df838319-9382-43ce-8538-573b42f7eb58%2Fevent-new-delhi-620x370%20(1).jpg?v=1567793496297\"\n\t\t\t\t\tdistance=\"6000km\"\n\t\t\t\t/>\n\n\t\t\t\t<Travels\n\t\t\t\t\tdestination=\"Barcelona\"\n\t\t\t\t\tcountry=\"Spain\"\n\t\t\t\t\timage=\"https://cdn.glitch.com/df838319-9382-43ce-8538-573b42f7eb58%2Fbarcelona.jpeg?v=1567795481073\"\n\t\t\t\t\tdistance=\"1200km\"\n\t\t\t\t/>\n\n\t\t\t\t<Travels\n\t\t\t\t\tdestination=\"London\"\n\t\t\t\t\tcountry=\"United Kingdom\"\n\t\t\t\t\timage=\"https://cdn.glitch.com/df838319-9382-43ce-8538-573b42f7eb58%2Flondon_2423609b.jpg?v=1567795496860\"\n\t\t\t\t\tdistance=\"1500km\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\nconst displaySection = {\n\tdisplay: 'flex'\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}