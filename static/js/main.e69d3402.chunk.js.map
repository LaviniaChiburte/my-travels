{"version":3,"sources":["Header.js","Button.js","Alarm.js","Travel.js","Travels.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","style","className","ButtonRouter","displayContainer","Button","displayButton","variant","size","margin","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","TimePickers","classes","noValidate","TextField","id","label","type","defaultValue","InputLabelProps","shrink","inputProps","step","marginBottom","border","paddingTop","Travel","destination","country","image","distance","src","alt","travels","Travels","map","travel","displaySection","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAYA,IAAMA,EAAc,CACnBC,WAAY,OACZC,MAAO,QACPC,UAAW,SACXC,QAAS,QAGKC,EAjBf,WACC,OACC,4BAAQC,MAAON,GACd,wBAAIO,UAAU,qBACb,0BAAMA,UAAU,aAAhB,QADD,a,cCDY,SAASC,IACvB,OACC,yBAAKD,UAAU,YAAYD,MAAOG,GACjC,kBAACC,EAAA,EAAD,CACCJ,MAAOK,EACPJ,UAAU,QACVL,MAAM,YACNU,QAAQ,YACRC,KAAK,SALN,aASA,kBAACH,EAAA,EAAD,CAAQH,UAAU,QAAQL,MAAM,UAAUU,QAAQ,WAAWC,KAAK,SAAlE,aAOH,IAAMF,EAAgB,CACrBG,OAAQ,QAGHL,EAAmB,CACxBN,UAAW,U,gBCxBNY,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,UAAW,CACVC,QAAS,OACTC,SAAU,QAEXC,UAAW,CACVC,WAAYL,EAAMM,QAAQ,GAC1BC,YAAaP,EAAMM,QAAQ,GAC3BE,MAAO,SAIM,SAASC,IACvB,IAAMC,EAAUZ,IAEhB,OACC,0BAAMR,UAAWoB,EAAQT,UAAWU,YAAU,GAC7C,kBAACC,EAAA,EAAD,CACCC,GAAG,OACHC,MAAM,cACNC,KAAK,OACLC,aAAa,QACb1B,UAAWoB,EAAQN,UACnBa,gBAAiB,CAChBC,QAAQ,GAETC,WAAY,CACXC,KAAM,QC7BX,IAaM5B,EAAmB,CACxBU,QAAS,OACTmB,aAAc,OACdC,OAAQ,iBACRC,WAAY,OACZrC,UAAW,UAGGsC,EArBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,SAAhC,OACd,yBAAKtC,UAAU,YAAYD,MAAOG,GACjC,yBAAKF,UAAU,OACd,yBAAKA,UAAU,WACd,yBAAKuC,IAAKF,EAAOG,IAAI,GAAGxC,UAAU,iCAClC,wBAAIA,UAAU,cAAcmC,GAC5B,wBAAInC,UAAU,aAAaoC,GAC3B,wBAAIpC,UAAU,aAAasC,OCLzBG,EAAU,CACf,CACCN,YAAa,YACbC,QAAS,QACTC,MACC,kHACDC,SAAU,UAGX,CACCH,YAAa,YACbC,QAAS,QACTC,MACC,iGACDC,SAAU,UAEX,CACCH,YAAa,SACbC,QAAS,iBACTC,MACC,oGACDC,SAAU,UAGX,CACCH,YAAa,OACbC,QAAS,SACTC,MACC,uIACDC,SAAU,SAEX,CACCH,YAAa,WACbC,QAAS,UACTC,MACC,6FACDC,SAAU,UAYGI,EARC,kBACf,6BACED,EAAQE,KAAI,SAAAC,GAAM,OAClB,kBAAC,EAAWA,QC3Bf,IAAMC,EAAiB,CACtBjC,QAAS,QAEKkC,EAhBf,WACC,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAK/C,UAAU,YAAYD,MAAO8C,GACjC,kBAAC,EAAD,SCFgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e69d3402.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1 className=\"center white-text\">\n\t\t\t\t<span className=\"pink-text\"> My </span>Travels\n\t\t\t</h1>\n\t\t</header>\n\t);\n}\n\nconst headerStyle = {\n\tbackground: '#333',\n\tcolor: 'white',\n\ttextAlign: 'center',\n\tpadding: '10px'\n};\n\nexport default Header;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nexport default function ButtonRouter() {\n\treturn (\n\t\t<div className=\"container\" style={displayContainer}>\n\t\t\t<Button\n\t\t\t\tstyle={displayButton}\n\t\t\t\tclassName=\"buton\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tsize=\"large\"\n\t\t\t>\n\t\t\t\tClick me!\n\t\t\t</Button>\n\t\t\t<Button className=\"buton\" color=\"primary\" variant=\"outlined\" size=\"large\">\n\t\t\t\tAvoid me\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n\nconst displayButton = {\n\tmargin: '20px'\n};\n\nconst displayContainer = {\n\ttextAlign: 'center'\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\tflexWrap: 'wrap'\n\t},\n\ttextField: {\n\t\tmarginLeft: theme.spacing(1),\n\t\tmarginRight: theme.spacing(1),\n\t\twidth: 200\n\t}\n}));\n\nexport default function TimePickers() {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<form className={classes.container} noValidate>\n\t\t\t<TextField\n\t\t\t\tid=\"time\"\n\t\t\t\tlabel=\"Alarm clock\"\n\t\t\t\ttype=\"time\"\n\t\t\t\tdefaultValue=\"07:30\"\n\t\t\t\tclassName={classes.textField}\n\t\t\t\tInputLabelProps={{\n\t\t\t\t\tshrink: true\n\t\t\t\t}}\n\t\t\t\tinputProps={{\n\t\t\t\t\tstep: 300 // 5 min\n\t\t\t\t}}\n\t\t\t/>\n\t\t</form>\n\t);\n}\n","import React from 'react';\n\nconst Travel = ({ destination, country, image, distance }) => (\n\t<div className=\"container\" style={displayContainer}>\n\t\t<div className=\"row\">\n\t\t\t<div className=\"col s12\">\n\t\t\t\t<img src={image} alt=\"\" className=\"materialboxed responsive-img\" />\n\t\t\t\t<h4 className=\"black-text\">{destination}</h4>\n\t\t\t\t<h5 className=\"pink-text\">{country}</h5>\n\t\t\t\t<h5 className=\"pink-text\">{distance}</h5>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nconst displayContainer = {\n\tdisplay: 'flex',\n\tmarginBottom: '25px',\n\tborder: '1px solid grey',\n\tpaddingTop: '20px',\n\ttextAlign: 'center'\n};\n\nexport default Travel;\n","import React from 'react';\nimport Travel from './Travel';\nimport './App.css';\n\nconst travels = [\n\t{\n\t\tdestination: 'New Delhi',\n\t\tcountry: 'India',\n\t\timage:\n\t\t\t'https://cdn.glitch.com/df04bd6a-ac99-477c-983b-95d1ac67c725%2Fevent-new-delhi-620x370%20(1).jpg?v=1568351402171',\n\t\tdistance: '6000km'\n\t},\n\n\t{\n\t\tdestination: 'Barcelona',\n\t\tcountry: 'Spain',\n\t\timage:\n\t\t\t'https://cdn.glitch.com/c36c65e0-89a2-4ebc-a770-de7adc69bcce%2Fbarcelona_2.webp?v=1568350858776',\n\t\tdistance: '6000km'\n\t},\n\t{\n\t\tdestination: 'London',\n\t\tcountry: 'United Kingdom',\n\t\timage:\n\t\t\t'https://cdn.glitch.com/df838319-9382-43ce-8538-573b42f7eb58%2Flondon_2423609b.jpg?v=1567795496860',\n\t\tdistance: '1500km'\n\t},\n\n\t{\n\t\tdestination: 'Oslo',\n\t\tcountry: 'Norway',\n\t\timage:\n\t\t\t'https://cdn.glitch.com/df04bd6a-ac99-477c-983b-95d1ac67c725%2FBarcelona_at_golden_hour_Credit_iStock_Eloi_Omella.jpg?v=1568351304274',\n\t\tdistance: '500km'\n\t},\n\t{\n\t\tdestination: 'Budapest',\n\t\tcountry: 'Hungary',\n\t\timage:\n\t\t\t'https://cdn.glitch.com/df04bd6a-ac99-477c-983b-95d1ac67c725%2Fbudapest.jpg?v=1568351020486',\n\t\tdistance: '700km'\n\t}\n];\n\nconst Travels = () => (\n\t<div>\n\t\t{travels.map(travel => (\n\t\t\t<Travel {...travel} />\n\t\t))}\n\t</div>\n);\n\nexport default Travels;\n","import React from 'react';\nimport Header from './Header';\nimport Button from './Button';\nimport TextField from './Alarm';\nimport './App.css';\nimport Travels from './Travels';\n\nfunction App() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Button />\n\t\t\t<TextField />\n\t\t\t<Header />\n\t\t\t<div className=\"container\" style={displaySection}>\n\t\t\t\t<Travels />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\nconst displaySection = {\n\tdisplay: 'flex'\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}